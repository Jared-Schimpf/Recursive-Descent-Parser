*comments will follow the following syntax:*
<comment>::= "//" {char} NEWLINE
		   | "/*" {char} "*/


*comments will be ignored and skipped over by the interpreter, unless they're placed in the middle of a token*


<program>::= {<proc>} <main>

<proc>::= "proc" <name> "{"
		  {<instr>}
		  "}"

<main>::= "main" "{"
		  {<instr>}
		  "}"
		  

<instr>::= (<commands> | <cond> | <callproc> | <init> | <print>)

<commands>::= <command> {<command>} ";"

<command>::= ( "step" | "turnL" | "turnR" | "take" | "drop" )

<cond>::= (<if> | <while> | <do>) 

<if>::= "if" <test> "{"
	    {instr} 
 	    "}"
        ["else" "{"
          {<instr>}
	      "}" 
		| "else" <instr>  ]
	
	  | "if" <test> <instr>
	    ["else" "{"
	      {<instr>}
	      "}" 
	    | "else" <instr>  ]


<while>::= "while" <test> "{"
	       {<instr>}
	       "}"
		 | "while" <test> <instr>

<do>::= "do" <integer> "{"
	    {<instr>}
	    "}"
	  | "do" <integer> <instr>

<callproc>::= "call" <name> ";"

<init>::= "init" ( "grid" <string> | "gems" <integer> ) ";"

<print>::= "print" <string>";"

<test>::= ["!" | not] ( "leftclear" | "rightclear" | "frontclear" | "backclear" | "seejem" | "hasjem" | "facingN" | "facingW" | "facingS" | "facingE" )

<integer>::= <digit>{<digit>}

<digit>::= ("0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9")

<name>::= *any string matching the following regex:*  [A-Za-z_]+

<String>:: \"{char}\"

